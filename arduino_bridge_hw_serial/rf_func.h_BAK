void sendRF02() { // sending  response message to device

  // STRUCT: 0x23 0x09 0x06 0x00 0x00 0x00 0x00 0x00 0xFF
  // 0x23 - response init
  // 0x09  - response device addr
  // 0x06 - cmd to request card
  // 0x00 * 5 times -  card ID
  // 0xFF - CRC value

  if (!in_rf_request_state) {
    return;
  }

  in_rf_request_state = false; //  init full valid package to false
  // set message  bytes  buff[0] = 0x23 always
  out_msg[1] = in_rf_msg[1]; // set message  bytes   device addr
  out_msg[2] = in_rf_msg[2];  // cmd


  for (byte i = 0; i < 5; i++) {
    out_msg[i + 3] = cardId[i]; // card id
  }

  out_msg[8] = OneWire::crc8( out_msg, 8);  // generate CRC
  enableRS();
  for (byte i = 0; i < 9; i++) { // send message to RS485
    Serial.write(out_msg[i]);
    delay(1);
  }
  disableRS();
}

void readRF02() {
  int cnt = 0; // set byte counter to 0
  unsigned char buff [4];

  for (byte i = 0; i < 4; i++) {  // clear income message to 0xFF
    in_rf_msg[i] = 0xFF;
  }

  // STRUCT :   0x33 0x09 0x06
  //  0x33 - start of message
  // 0x09  end device address (RS485)
  // 0x06 -  cmd to request card
  // 0xFF  -  CRC  check value
  while (Serial.available())
  {
    
    cnt++;
    // read while got message
    char c = Serial.read();
    if (c == 0x33) {  // if we got start of message
      
      cnt = 0;
      buff[0] = c;  // init,  put 0x33 to bufffer
      buff[1] = Serial.read(); // addr
      buff[2] = Serial.read();   // cmd
      buff[3] = Serial.read();   // crc

      if (OneWire::crc8( buff, 3) == buff[3]) {  // check if crc valid
        in_rf_request_state = true;  // set request flag - true
        for (byte i = 0; i < 4; i++) { // write buffer to array
          in_rf_msg[i] = buff[i];
        }
        return;
      }
      // if crc wrong - set state to false
    }
    if (cnt > 15) {
      Serial.flush();
      return;
    }
  }

  return;
}
